---

#################################################
# one time setup
#################################################


- name: create group
  group:
    name: '{{ dehydrated_web_group }}'
    system: yes

- name: create user
  user:
    name: '{{ dehydrated_user }}'
    group: '{{ dehydrated_web_group }}'
    create_home: no
    password_lock: yes
    system: yes

- name: create base directory
  file:
    path: '{{ dehydrated_base_directory }}'
    state: directory
    mode: 0750
    owner: '{{ dehydrated_user }}'
    group: '{{ dehydrated_web_group }}'

- name: write configuration file
  template:
    src: etc_dehydrated_config.j2
    dest: "{{ dehydrated_config_file }}"
    owner: '{{ dehydrated_user }}'
    group: '{{ dehydrated_web_group }}'

- name: write hook.sh file
  template:
    src: hook.sh.j2
    dest: "{{ dehydrated_base_directory }}/hook.sh"
    owner: '{{ dehydrated_user }}'
    group: '{{ dehydrated_web_group }}'
    mode: 0750

- name: generate dehydrated domain list
  template:
    src: domains.txt.j2
    dest: "{{ dehydrated_domains_file }}"
    mode: 0750
    owner: '{{ dehydrated_user }}'
    group: '{{ dehydrated_web_group }}'

- name: create challenges directory
  file:
    path: '{{ dehydrated_challenges_directory }}'
    state: directory
    owner: '{{ dehydrated_user }}'
    group: '{{ dehydrated_web_group }}'
    mode: 0750
    recurse: true


##


- name: Get lasted release of dehydrated
  get_url:
    dest: '{{ dehydrated_software_tmp_archive }}'
    force: yes
    url: '{{ dehydrated_release }}'

- name: Remove software directory
  file:
    path: '{{ dehydrated_software_directory }}'
    state: absent

- name: create temp software directory
  file:
    path: '{{ dehydrated_software_tmp_directory }}'
    state: directory
    owner: root
    group: root
    mode: 0755

- name: Expand archive
  unarchive:
    src: '{{ dehydrated_software_tmp_archive }}'
    dest: '{{ dehydrated_software_tmp_directory }}'
    remote_src: yes
    owner: root
    group: root
    mode: 0755

- name: Move archive
  command: mv '{{ dehydrated_software_tmp_directory }}/dehydrated-master' '{{ dehydrated_software_directory }}'

- name: Remove archive
  file:
    path: '{{ dehydrated_software_tmp_archive }}'
    state: absent

- name: Remove temp files
  file:
    path: '{{ dehydrated_software_tmp_directory }}'
    state: absent

- name: Accept terms
  command: sudo -u dehydrated /usr/local/bin/dehydrated/dehydrated --register --accept-terms
  register: out

- debug: var=out.stdout_lines

- debug: msg="Please setup nginx and request the first certificate."

#################################################
# cron setup

- name: install cronjob for key generation
  cron:
    job: "{{ dehydrated_software_directory }}/dehydrated -c -f {{ dehydrated_config_file }} > /var/log/dehydrated.log 2>&1"
    day: "{{ dehydrated_cronjob_daysofmonth }}"
    hour: "{{ 6 | random }}"
    minute: "{{ 59 | random }}"
    state: present
    name: "letsencrypt certificate renewal"
    user: "root"

...
